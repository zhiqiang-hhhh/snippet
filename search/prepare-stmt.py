import logging
import mysql.connector

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

conn = mysql.connector.connect(
    host='127.0.0.1',
    port=6937,
    user='root',
    password='',
    database='vector_test',
    use_unicode=True
)

cursor = conn.cursor(prepared=True)  # 使用 prepared cursor

# SQL 模板（用 %s 占位符）
# 注意：表名不能用参数化查询，需要用字符串格式化
tbl = "dim_716_num_10000000_ac"
# 注意：Doris/MySQL 的 prepared statement 通常不支持 LIMIT 使用占位符，这里将 LIMIT 直接内联
sql = f"""SELECT id, l2_distance_approximate(embedding, CAST(%s AS ARRAY<FLOAT>)) as distance FROM {tbl} ORDER BY distance LIMIT {{limit}}""".format(limit=5)

# 示例参数
query_vector = [68.06422, 34.242, 62.42017, 91.25107, 79.68598, 45.36961, 30.48678, 64.92834, 35.52198, 4.685061, 71.65162, 93.10229, 38.88125, 94.74012, 60.29166, 25.8706, 58.48048, 47.44588, 92.202, 53.75473, 39.24153, 92.97786, 23.78166, 79.20589, 63.98929, 39.69782, 63.41852, 25.06319, 69.54924, 98.90247, 78.71984, 72.63871, 98.83834, 10.2115, 88.0786, 79.66486, 55.34675, 68.97227, 29.51801, 7.670998, 76.90141, 12.77783, 92.38766, 38.75824, 42.577, 31.67184, 65.3716, 64.61924, 69.31382, 19.3228, 81.91682, 71.52753, 26.91518, 50.30984, 50.91584, 4.397707, 38.82943, 28.80144, 36.1624, 41.76813, 11.83819, 77.21579, 12.22902, 13.18528, 8.014833, 84.78328, 70.49925, 72.34869, 42.49689, 70.82356, 57.58574, 38.13679, 85.78449, 31.38629, 99.91869, 11.54246, 63.14442, 34.86522, 66.27867, 62.09017, 75.84635, 99.30457, 24.55404, 87.51561, 41.48684, 57.11344, 27.41985, 81.96656, 91.56631, 4.125005, 51.67388, 36.02416, 73.52695, 67.79417, 77.18697, 40.02473, 91.56822, 31.07501, 21.01557, 81.49801, 49.87868, 74.06899, 56.16169, 2.329702, 56.28254, 17.88269, 77.91193, 76.21124, 11.7944, 76.92342, 44.86507, 96.9565, 13.7694, 25.93452, 86.87697, 9.369915, 33.62131, 26.23899, 63.38089, 65.37386, 52.37247, 96.76615, 38.01542, 51.70082, 1.051853, 34.82804, 27.20539, 65.98499, 81.40073, 81.83714, 3.226407, 47.8227, 39.10025, 28.09477, 88.52702, 80.99482, 68.27723, 75.76519, 70.91206, 35.57395, 26.51098, 82.08831, 74.29753, 72.81003, 43.57639, 61.58827, 25.82216, 67.45573, 87.27393, 39.31215, 18.30984, 84.52319, 48.495, 47.10402, 47.73762, 31.74393, 68.69881, 69.674, 33.6883, 76.39742, 56.53922, 46.09525, 47.68638, 76.76189, 18.1738, 50.06432, 51.49051, 22.85026, 69.01178, 93.69646, 35.72439, 16.27572, 66.77383, 4.164001, 64.0748, 44.71711, 13.25815, 80.11929, 83.58527, 29.7578, 33.85094, 43.2033, 74.63014, 43.11875, 92.19571, 72.12269, 55.64302, 40.38046, 60.88773, 33.17436, 13.91923, 67.80922, 70.35799, 99.02433, 49.84929, 37.64466, 26.11254, 70.73055, 11.21273, 46.23387, 15.95748, 68.3259, 25.55796, 51.86749, 94.31833, 33.73774, 50.92359, 13.72911, 82.53623, 89.74499, 45.97491, 47.87244, 91.26604, 7.256149, 72.53272, 77.29579, 48.84439, 80.12703, 63.2095, 92.56457, 42.82642, 7.966267, 24.69377, 94.34093, 32.86687, 32.35301, 66.81715, 36.49592, 60.25191, 39.7918, 96.0355, 69.72161, 94.81241, 67.62455, 87.52817, 67.64213, 93.47662, 43.84259, 94.4202, 57.43055, 95.70135, 48.48006, 91.22522, 69.04282, 32.75183, 60.47742, 50.89322, 96.91676, 46.55241, 45.97839, 84.36232, 74.98603, 92.92813, 27.59503, 31.00625, 69.58963, 67.51855, 89.54188, 10.88303, 35.67744, 25.39028, 81.94213, 40.86387, 41.57475, 75.10616, 30.61978, 26.86818, 22.61145, 66.24073, 58.45057, 1.704567, 48.77732, 37.65925, 77.8639, 67.40866, 81.06054, 8.372971, 1.531722, 12.87004, 96.60979, 61.47424, 3.08612, 59.83154, 46.50377, 53.47922, 32.72361, 32.96302, 29.33669, 75.59019, 10.54937, 88.52374, 52.09174, 33.76741, 41.25903, 62.26503, 29.81598, 68.99068, 2.0205, 41.32946, 77.64771, 62.8839, 13.83852, 71.77216, 25.70098, 67.63142, 46.49064, 93.18377, 40.09918, 32.32825, 94.15479, 94.72574, 58.28157, 13.76453, 27.97032, 22.79848, 79.79678, 61.11081, 53.9735, 87.33437, 42.77335, 50.22849, 26.6757, 51.62331, 66.76767, 88.01009, 40.30181, 32.14606, 21.17583, 24.35798, 90.27635, 11.98133, 94.61118, 49.58209, 84.53738, 33.12305, 4.506083, 43.02925, 40.51292, 53.14674, 56.55058, 62.6496, 49.99133, 59.37218, 29.21922, 5.111335, 4.38166, 26.82175, 17.63585, 70.34288, 93.07328, 76.40372, 64.67708, 69.77411, 8.617801, 68.27752, 84.5476, 72.14388, 37.78204, 36.05265, 79.05705, 38.84705, 68.88815, 97.21266, 55.90219, 46.78454, 10.54566, 21.52476, 99.09177, 27.78005, 88.25161, 90.92252, 25.08235, 29.9887, 14.56431, 22.17887, 34.6273, 94.45933, 35.45617, 93.41107, 16.953, 77.43942, 84.2689, 2.150069, 83.09147, 55.72684, 91.01944, 96.46725, 21.04395, 58.3556, 41.1337, 82.01211, 3.306591, 38.87278, 70.10033, 20.46788, 4.699806, 50.02144, 44.75183, 71.52091, 32.33498, 33.81637, 61.86605, 26.0224, 21.7546, 78.1075, 25.30351, 7.284178, 6.555484, 51.39885, 19.25878, 60.02078, 53.63339, 90.28479, 90.41115, 97.00051, 17.25649, 60.53967, 27.84941, 56.04009, 48.50531, 61.13745, 71.48898, 6.519121, 44.62042, 59.58471, 2.747926, 14.03245, 70.50098, 25.02988, 56.3577, 12.29678, 59.80694, 90.56292, 5.58059, 19.44311, 7.566559, 80.6419, 7.723153, 85.70717, 3.380239, 73.39591, 5.889709, 73.27821, 18.39198, 23.15144, 5.876987, 75.77702, 46.41547, 21.45932, 83.16389, 43.25126, 10.52828, 84.40131, 29.30075, 83.82298, 13.24966, 74.00744, 16.13562, 49.78718, 66.12034, 93.94824, 63.07481, 55.23343, 4.859999, 75.65116, 78.94521, 44.81704, 79.91758, 86.90883, 21.4314, 74.04282, 45.80611, 18.82862, 17.62387, 53.67496, 21.68234, 51.72007, 64.75279, 96.60148, 42.47287, 37.11144, 35.78435, 12.87601, 43.12256, 74.35873, 56.85279, 9.10606, 96.55869, 67.30942, 57.06361, 6.781143, 73.14227, 1.060049, 23.34706, 72.48726, 56.36175, 1.767185, 51.6466, 25.00321, 55.35439, 67.06142, 40.30913, 92.02413, 95.74928, 58.69778, 74.34915, 80.38245, 22.33398, 44.29587, 82.07547, 47.25388, 41.31819, 92.43409, 99.62287, 56.25011, 74.1364, 10.33519, 97.74808, 89.45316, 16.28002, 72.13939, 34.34699, 31.48618, 38.5826, 78.34048, 57.9757, 36.3737, 99.11543, 70.2177, 80.21745, 72.52378, 1.353594, 31.40523, 69.44028, 26.93146, 6.246406, 87.57317, 27.60635, 48.38796, 3.564487, 51.71518, 82.1926, 92.88407, 1.156864, 14.79738, 30.8061, 57.30793, 81.12434, 42.40299, 36.02771, 59.8274, 60.85769, 99.30642, 61.7817, 98.60086, 34.86906, 39.40288, 1.323995, 48.70794, 59.28684, 72.3205, 36.32706, 7.473542, 93.33039, 45.54786, 75.23705, 97.58723, 9.872983, 7.381198, 86.74442, 87.54189, 23.50908, 29.01643, 9.480229, 34.43053, 47.31331, 88.38932, 19.06345, 22.27657, 51.06133, 5.651557, 5.679738, 78.49844, 70.45242, 56.56396, 5.126647, 36.62654, 34.07323, 84.50278, 83.43288, 31.94834, 82.60242, 44.10186, 23.84294, 41.13567, 23.10024, 32.21809, 54.95947, 18.92088, 6.576834, 49.52304, 21.4618, 54.03069, 93.87622, 10.53015, 20.30694, 15.03063, 40.97348, 26.8342, 16.79447, 15.01031, 26.5347, 76.84724, 36.29923, 15.18978, 56.63898, 63.67776, 27.70954, 25.34631, 77.92915, 10.17438, 82.9426, 52.22699, 80.12833, 43.33094, 17.98866, 39.2296, 1.758695, 97.56205, 2.005889, 85.5093, 99.16977, 79.86702, 14.65453, 21.91401, 67.84145, 39.1748, 37.9628, 14.59507, 65.93212, 54.00916, 17.11628, 84.51984, 78.34307, 32.45463, 69.64142, 14.17167, 40.45212, 32.35894, 1.78996, 44.73752, 94.34871, 96.91105, 81.61972, 6.357549, 74.52414, 80.04854, 63.45251, 41.79522, 93.67065, 47.18916, 23.65399, 33.62543, 1.165265, 82.60334, 66.00932, 36.40812, 20.36707, 33.61827, 67.92999, 27.34502, 48.6432, 15.63941, 70.35292, 48.41797, 20.67882, 89.65801, 74.14085, 96.12965, 59.42165, 96.6525, 39.1125, 3.0041, 93.29865, 26.33558, 83.1691, 78.45901, 94.51788, 64.24853, 87.99499, 18.3589, 96.03128, 92.15649, 70.92126, 61.13662, 63.82459, 24.73856, 83.8252, 66.89725, 20.17193, 14.26762, 49.00517, 11.07849, 21.99117, 64.49281, 45.96034, 73.00625, 29.74046, 27.02116, 57.26839, 31.13133, 97.25845, 66.24335, 71.7048, 14.52919, 65.23403]   # 查询向量
topk = 5                     # topk

# mysql-connector 不支持直接 ARRAY，需要转成字符串 '[0.1,0.2,0.3,0.4]'
query_vector_str = "[" + ",".join(map(str, query_vector)) + "]"
# cast_to_array = f"CAST('{query_vector_str}' AS ARRAY<FLOAT>)"
params = (query_vector_str,)

# 执行 prepare statement
cursor.execute(sql, params)

# 获取结果
rows = cursor.fetchall()
for row in rows:
    print(row)

cursor.close()
conn.close()
